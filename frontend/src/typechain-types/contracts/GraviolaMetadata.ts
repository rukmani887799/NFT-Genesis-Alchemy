/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace GraviolaMetadata {
  export type MetadataStruct = {
    image: string;
    prompt: string;
    rarity: BigNumberish;
    filled: boolean;
  };

  export type MetadataStructOutput = [
    image: string,
    prompt: string,
    rarity: bigint,
    filled: boolean
  ] & { image: string; prompt: string; rarity: bigint; filled: boolean };
}

export interface GraviolaMetadataInterface extends Interface {
  getFunction(
    nameOrSignature: "getMetadata" | "getTokenRarities"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRarities",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRarities",
    data: BytesLike
  ): Result;
}

export interface GraviolaMetadata extends BaseContract {
  connect(runner?: ContractRunner | null): GraviolaMetadata;
  waitForDeployment(): Promise<this>;

  interface: GraviolaMetadataInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMetadata: TypedContractMethod<
    [tokenId: BigNumberish],
    [GraviolaMetadata.MetadataStructOutput],
    "view"
  >;

  getTokenRarities: TypedContractMethod<
    [tokenId0: BigNumberish, tokenId1: BigNumberish, tokenId2: BigNumberish],
    [
      [[bigint, bigint, bigint], bigint] & {
        rarities: [bigint, bigint, bigint];
        average: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMetadata"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [GraviolaMetadata.MetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenRarities"
  ): TypedContractMethod<
    [tokenId0: BigNumberish, tokenId1: BigNumberish, tokenId2: BigNumberish],
    [
      [[bigint, bigint, bigint], bigint] & {
        rarities: [bigint, bigint, bigint];
        average: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
