/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VRFHostConsumerInterface {
  export type RoundStruct = {
    proposer: AddressLike;
    randomNumber: BigNumberish;
    randomNumberHash: BytesLike;
    state: BigNumberish;
    blockHeight: BigNumberish;
  };

  export type RoundStructOutput = [
    proposer: string,
    randomNumber: bigint,
    randomNumberHash: string,
    state: bigint,
    blockHeight: bigint
  ] & {
    proposer: string;
    randomNumber: bigint;
    randomNumberHash: string;
    state: bigint;
    blockHeight: bigint;
  };
}

export interface VRFHostMockInterface extends Interface {
  getFunction(
    nameOrSignature: "addRound" | "getCurrentRoundId" | "getRound"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRound",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRound", data: BytesLike): Result;
}

export interface VRFHostMock extends BaseContract {
  connect(runner?: ContractRunner | null): VRFHostMock;
  waitForDeployment(): Promise<this>;

  interface: VRFHostMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRound: TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;

  getCurrentRoundId: TypedContractMethod<[], [bigint], "view">;

  getRound: TypedContractMethod<
    [id: BigNumberish],
    [VRFHostConsumerInterface.RoundStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRound"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentRoundId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRound"
  ): TypedContractMethod<
    [id: BigNumberish],
    [VRFHostConsumerInterface.RoundStructOutput],
    "view"
  >;

  filters: {};
}
