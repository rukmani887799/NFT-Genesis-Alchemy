/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VRFConsumerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getRefValue"
      | "host"
      | "isRandomValueReady"
      | "readRandomValue"
      | "saveRandomValue"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getRefValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "host", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRandomValueReady",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readRandomValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "saveRandomValue",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getRefValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "host", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRandomValueReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readRandomValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveRandomValue",
    data: BytesLike
  ): Result;
}

export interface VRFConsumer extends BaseContract {
  connect(runner?: ContractRunner | null): VRFConsumer;
  waitForDeployment(): Promise<this>;

  interface: VRFConsumerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRefValue: TypedContractMethod<[_id: BigNumberish], [bigint], "view">;

  host: TypedContractMethod<[], [string], "view">;

  isRandomValueReady: TypedContractMethod<
    [refId: BigNumberish],
    [boolean],
    "view"
  >;

  readRandomValue: TypedContractMethod<[refId: BigNumberish], [bigint], "view">;

  saveRandomValue: TypedContractMethod<[], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRefValue"
  ): TypedContractMethod<[_id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "host"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isRandomValueReady"
  ): TypedContractMethod<[refId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "readRandomValue"
  ): TypedContractMethod<[refId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "saveRandomValue"
  ): TypedContractMethod<[], [bigint], "nonpayable">;

  filters: {};
}
