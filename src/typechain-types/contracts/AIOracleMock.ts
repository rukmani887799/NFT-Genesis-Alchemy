/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AIOracleMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callbackFunctionSelector"
      | "estimateFee"
      | "fee"
      | "invokeCallback"
      | "isFinalized"
      | "requestCallback"
      | "requestCounter"
      | "requests"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AICallbackRequest" | "AICallbackResult"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "callbackFunctionSelector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "invokeCallback",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCallback",
    values: [BigNumberish, BytesLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "callbackFunctionSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invokeCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
}

export namespace AICallbackRequestEvent {
  export type InputTuple = [
    account: AddressLike,
    requestId: BigNumberish,
    modelId: BigNumberish,
    input: BytesLike,
    callbackContract: AddressLike,
    gasLimit: BigNumberish,
    callbackData: BytesLike
  ];
  export type OutputTuple = [
    account: string,
    requestId: bigint,
    modelId: bigint,
    input: string,
    callbackContract: string,
    gasLimit: bigint,
    callbackData: string
  ];
  export interface OutputObject {
    account: string;
    requestId: bigint;
    modelId: bigint;
    input: string;
    callbackContract: string;
    gasLimit: bigint;
    callbackData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AICallbackResultEvent {
  export type InputTuple = [
    invoker: AddressLike,
    requestId: BigNumberish,
    output: BytesLike
  ];
  export type OutputTuple = [
    invoker: string,
    requestId: bigint,
    output: string
  ];
  export interface OutputObject {
    invoker: string;
    requestId: bigint;
    output: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AIOracleMock extends BaseContract {
  connect(runner?: ContractRunner | null): AIOracleMock;
  waitForDeployment(): Promise<this>;

  interface: AIOracleMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callbackFunctionSelector: TypedContractMethod<[], [string], "view">;

  estimateFee: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  fee: TypedContractMethod<[], [bigint], "view">;

  invokeCallback: TypedContractMethod<
    [requestId: BigNumberish, output: BytesLike],
    [void],
    "nonpayable"
  >;

  isFinalized: TypedContractMethod<
    [requestId: BigNumberish],
    [boolean],
    "view"
  >;

  requestCallback: TypedContractMethod<
    [
      modelId: BigNumberish,
      input: BytesLike,
      callbackContract: AddressLike,
      gasLimit: BigNumberish,
      callbackData: BytesLike
    ],
    [bigint],
    "payable"
  >;

  requestCounter: TypedContractMethod<[], [bigint], "view">;

  requests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, string, bigint, string] & {
        account: string;
        requestId: bigint;
        modelId: bigint;
        input: string;
        callbackContract: string;
        gasLimit: bigint;
        callbackData: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callbackFunctionSelector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "estimateFee"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "invokeCallback"
  ): TypedContractMethod<
    [requestId: BigNumberish, output: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isFinalized"
  ): TypedContractMethod<[requestId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "requestCallback"
  ): TypedContractMethod<
    [
      modelId: BigNumberish,
      input: BytesLike,
      callbackContract: AddressLike,
      gasLimit: BigNumberish,
      callbackData: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "requestCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, string, string, bigint, string] & {
        account: string;
        requestId: bigint;
        modelId: bigint;
        input: string;
        callbackContract: string;
        gasLimit: bigint;
        callbackData: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "AICallbackRequest"
  ): TypedContractEvent<
    AICallbackRequestEvent.InputTuple,
    AICallbackRequestEvent.OutputTuple,
    AICallbackRequestEvent.OutputObject
  >;
  getEvent(
    key: "AICallbackResult"
  ): TypedContractEvent<
    AICallbackResultEvent.InputTuple,
    AICallbackResultEvent.OutputTuple,
    AICallbackResultEvent.OutputObject
  >;

  filters: {
    "AICallbackRequest(address,uint256,uint256,bytes,address,uint64,bytes)": TypedContractEvent<
      AICallbackRequestEvent.InputTuple,
      AICallbackRequestEvent.OutputTuple,
      AICallbackRequestEvent.OutputObject
    >;
    AICallbackRequest: TypedContractEvent<
      AICallbackRequestEvent.InputTuple,
      AICallbackRequestEvent.OutputTuple,
      AICallbackRequestEvent.OutputObject
    >;

    "AICallbackResult(address,uint256,bytes)": TypedContractEvent<
      AICallbackResultEvent.InputTuple,
      AICallbackResultEvent.OutputTuple,
      AICallbackResultEvent.OutputObject
    >;
    AICallbackResult: TypedContractEvent<
      AICallbackResultEvent.InputTuple,
      AICallbackResultEvent.OutputTuple,
      AICallbackResultEvent.OutputObject
    >;
  };
}
