/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace GraviolaWell {
  export type RarityGroupSettingStruct = {
    omega: BigNumberish;
    groupProbabilities: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ];
  };

  export type RarityGroupSettingStructOutput = [
    omega: bigint,
    groupProbabilities: [bigint, bigint, bigint, bigint, bigint]
  ] & {
    omega: bigint;
    groupProbabilities: [bigint, bigint, bigint, bigint, bigint];
  };

  export type WordStruct = {
    keyword: string;
    lowerRange: BigNumberish;
    upperRange: BigNumberish;
  };

  export type WordStructOutput = [
    keyword: string,
    lowerRange: bigint,
    upperRange: bigint
  ] & { keyword: string; lowerRange: bigint; upperRange: bigint };

  export type RarityGroupStruct = {
    name: string;
    rarityPerc: BigNumberish;
    keywords: GraviolaWell.WordStruct[];
  };

  export type RarityGroupStructOutput = [
    name: string,
    rarityPerc: bigint,
    keywords: GraviolaWell.WordStructOutput[]
  ] & {
    name: string;
    rarityPerc: bigint;
    keywords: GraviolaWell.WordStructOutput[];
  };
}

export interface GraviolaWellInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "KEYWORDS_PER_TOKEN"
      | "RARITY_GROUPS_LENGTH"
      | "TOKENS_PER_TRADE_UP"
      | "_tradeUp"
      | "findRarityGroupRange"
      | "findWordFromRand"
      | "getRarityGroups"
      | "getWordProbability"
      | "rollWords(uint256)"
      | "rollWords(uint256,(uint256,uint256[5]))"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RollResult"): EventFragment;

  encodeFunctionData(
    functionFragment: "KEYWORDS_PER_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RARITY_GROUPS_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKENS_PER_TRADE_UP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_tradeUp",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findRarityGroupRange",
    values: [BigNumberish, GraviolaWell.RarityGroupSettingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "findWordFromRand",
    values: [BigNumberish, GraviolaWell.RarityGroupStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getRarityGroups",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWordProbability",
    values: [BigNumberish, GraviolaWell.RarityGroupStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rollWords(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollWords(uint256,(uint256,uint256[5]))",
    values: [BigNumberish, GraviolaWell.RarityGroupSettingStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "KEYWORDS_PER_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RARITY_GROUPS_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKENS_PER_TRADE_UP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_tradeUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findRarityGroupRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findWordFromRand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRarityGroups",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWordProbability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollWords(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rollWords(uint256,(uint256,uint256[5]))",
    data: BytesLike
  ): Result;
}

export namespace RollResultEvent {
  export type InputTuple = [result: string, rarityPerc: BigNumberish];
  export type OutputTuple = [result: string, rarityPerc: bigint];
  export interface OutputObject {
    result: string;
    rarityPerc: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GraviolaWell extends BaseContract {
  connect(runner?: ContractRunner | null): GraviolaWell;
  waitForDeployment(): Promise<this>;

  interface: GraviolaWellInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  KEYWORDS_PER_TOKEN: TypedContractMethod<[], [bigint], "view">;

  RARITY_GROUPS_LENGTH: TypedContractMethod<[], [bigint], "view">;

  TOKENS_PER_TRADE_UP: TypedContractMethod<[], [bigint], "view">;

  _tradeUp: TypedContractMethod<
    [
      _seed: BigNumberish,
      _tradeUpComponentsGroupId: BigNumberish,
      _averageTokenRarity: BigNumberish
    ],
    [[string, bigint, bigint]],
    "view"
  >;

  findRarityGroupRange: TypedContractMethod<
    [
      _percInput: BigNumberish,
      _raritySetting: GraviolaWell.RarityGroupSettingStruct
    ],
    [[GraviolaWell.RarityGroupStructOutput, bigint]],
    "view"
  >;

  findWordFromRand: TypedContractMethod<
    [_randNum: BigNumberish, _targetGroup: GraviolaWell.RarityGroupStruct],
    [bigint],
    "view"
  >;

  getRarityGroups: TypedContractMethod<
    [],
    [
      [
        GraviolaWell.RarityGroupStructOutput,
        GraviolaWell.RarityGroupStructOutput,
        GraviolaWell.RarityGroupStructOutput,
        GraviolaWell.RarityGroupStructOutput,
        GraviolaWell.RarityGroupStructOutput
      ]
    ],
    "view"
  >;

  getWordProbability: TypedContractMethod<
    [_keywordIndex: BigNumberish, _targetGroup: GraviolaWell.RarityGroupStruct],
    [bigint],
    "view"
  >;

  "rollWords(uint256)": TypedContractMethod<
    [_seed: BigNumberish],
    [[string, bigint, bigint]],
    "view"
  >;

  "rollWords(uint256,(uint256,uint256[5]))": TypedContractMethod<
    [
      _seed: BigNumberish,
      _customRaritySetting: GraviolaWell.RarityGroupSettingStruct
    ],
    [[string, bigint, bigint]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "KEYWORDS_PER_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RARITY_GROUPS_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKENS_PER_TRADE_UP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_tradeUp"
  ): TypedContractMethod<
    [
      _seed: BigNumberish,
      _tradeUpComponentsGroupId: BigNumberish,
      _averageTokenRarity: BigNumberish
    ],
    [[string, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "findRarityGroupRange"
  ): TypedContractMethod<
    [
      _percInput: BigNumberish,
      _raritySetting: GraviolaWell.RarityGroupSettingStruct
    ],
    [[GraviolaWell.RarityGroupStructOutput, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "findWordFromRand"
  ): TypedContractMethod<
    [_randNum: BigNumberish, _targetGroup: GraviolaWell.RarityGroupStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRarityGroups"
  ): TypedContractMethod<
    [],
    [
      [
        GraviolaWell.RarityGroupStructOutput,
        GraviolaWell.RarityGroupStructOutput,
        GraviolaWell.RarityGroupStructOutput,
        GraviolaWell.RarityGroupStructOutput,
        GraviolaWell.RarityGroupStructOutput
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWordProbability"
  ): TypedContractMethod<
    [_keywordIndex: BigNumberish, _targetGroup: GraviolaWell.RarityGroupStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rollWords(uint256)"
  ): TypedContractMethod<
    [_seed: BigNumberish],
    [[string, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "rollWords(uint256,(uint256,uint256[5]))"
  ): TypedContractMethod<
    [
      _seed: BigNumberish,
      _customRaritySetting: GraviolaWell.RarityGroupSettingStruct
    ],
    [[string, bigint, bigint]],
    "view"
  >;

  getEvent(
    key: "RollResult"
  ): TypedContractEvent<
    RollResultEvent.InputTuple,
    RollResultEvent.OutputTuple,
    RollResultEvent.OutputObject
  >;

  filters: {
    "RollResult(string,uint256)": TypedContractEvent<
      RollResultEvent.InputTuple,
      RollResultEvent.OutputTuple,
      RollResultEvent.OutputObject
    >;
    RollResult: TypedContractEvent<
      RollResultEvent.InputTuple,
      RollResultEvent.OutputTuple,
      RollResultEvent.OutputObject
    >;
  };
}
