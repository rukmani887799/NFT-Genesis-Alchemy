/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type UpkeepInfoStruct = {
  target: AddressLike;
  executeGas: BigNumberish;
  checkData: BytesLike;
  balance: BigNumberish;
  admin: AddressLike;
  maxValidBlocknumber: BigNumberish;
  lastPerformBlockNumber: BigNumberish;
  amountSpent: BigNumberish;
  paused: boolean;
  offchainConfig: BytesLike;
};

export type UpkeepInfoStructOutput = [
  target: string,
  executeGas: bigint,
  checkData: string,
  balance: bigint,
  admin: string,
  maxValidBlocknumber: bigint,
  lastPerformBlockNumber: bigint,
  amountSpent: bigint,
  paused: boolean,
  offchainConfig: string
] & {
  target: string;
  executeGas: bigint;
  checkData: string;
  balance: bigint;
  admin: string;
  maxValidBlocknumber: bigint;
  lastPerformBlockNumber: bigint;
  amountSpent: bigint;
  paused: boolean;
  offchainConfig: string;
};

export interface IKeeperRegistryInterface extends Interface {
  getFunction(nameOrSignature: "getUpkeep"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getUpkeep",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getUpkeep", data: BytesLike): Result;
}

export interface IKeeperRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IKeeperRegistry;
  waitForDeployment(): Promise<this>;

  interface: IKeeperRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getUpkeep: TypedContractMethod<
    [id: BigNumberish],
    [UpkeepInfoStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getUpkeep"
  ): TypedContractMethod<[id: BigNumberish], [UpkeepInfoStructOutput], "view">;

  filters: {};
}
